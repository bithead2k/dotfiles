alias ~='cd ~'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .4='cd ../../..'
alias .5='cd ../../../..'
alias acs='apt-cache search'
alias aiy='sudo apt -y install'
alias ali='apt list --installed | grep '
alias calc='bc -l <<<'
alias cdd='cd - >/dev/null'
alias cls='clear'
alias gf='cd / && find . 2>/dev/null | grep '
alias gw='ghostwriter'
alias hg='history | grep '
alias lb='ls -la ~/bin'
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias lsl='ls -al'
alias md='mkdir'
alias now='date +"%FT%T CST"'
alias phip='adb shell ifconfig | grep "inet addr" | grep Bcast | sed -e "s/^.*addr://" -e "s/ .*$//"'
alias rd='rmdir'
alias sl=ls
alias mvim='gvim'
alias urldecode='while read; do echo -e ${REPLY//%/\\x};done'
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Functions doing duty as aliases in order to take parameters
function txt2pdf(){ pandoc -s --pdf-engine=xelatex -o "${1//.*/}.pdf" $1; }

function pg_pretty() { curl -s -XPOST --data-urlencode "q@${1:--}" https://paste.depesz.com/prettify | sed '$d' ; }

function join_array() {

    delimiter=$1
    output=""
    shift
    output=$(printf "$delimiter%s" "${@}")
    echo -ne "${output:${#delimiter}}"

}

function urlencode() {

  input=${1:-$(timeout 2s cat -)}

  ta=$(echo -ne "\t")


  s="${input//'%'/%25}"
  #dumb shit i gotta do for newline
  s=$(echo -ne "$s" | sed -z 's/\n/%0a/g')
  s="${s//$ta/%09}"
  s="${s//' '/%20}"
  s="${s//'.'/%2e}"
  s="${s//''/%27}"
  s="${s//'!'/%21}"
  s="${s//'*'/%2a}"
  s="${s//'-'/%2d}"
  s="${s//'"'/%22}"
  s="${s//'^'/%5e}"
  s="${s//'~'/%7e}"
  s="${s//'_'/%5f}"
  s="${s//'`'/%60}"
  s="${s//'{'/%7d}"
  s="${s//'}'/%7b}"
  s="${s//'|'/%7c}"
  s="${s//'"'/%22}"
  s="${s//'#'/%23}"
  s="${s//'$'/%24}"
  s="${s//'&'/%26}"
  s="${s//'+'/%2B}"
  s="${s//','/%2C}"
  s="${s//'/'/%2F}"
  s="${s//'\'/%5c}"
  s="${s//':'/%3A}"
  s="${s//';'/%3B}"
  s="${s//'='/%3D}"
  s="${s//'?'/%3F}"
  s="${s//'@'/%40}"
  s="${s//'['/%5B}"
  s="${s//']'/%5D}"
  s="${s//'('/%28}"
  s="${s//')'/%29}"
  s="${s//'<'/%3C}"
  s="${s//'>'/%3E}"
  printf %s "$s"
  REPLY="$s"
}

function nf() {
	# find a reference to something in my pandoc notes
	pushd ~/Documents/notes > /dev/null 2>&1 
    IFS=$'\n'
    for note in $(find . -name "*.md")
    do
        grep -Hni -B2 -A7 "$@" "$note"
    done
	popd >/dev/null 2>&1
}

function vorgestern() { date --date="-2 days" +"%F"; }
function yesterday() { date --date="-1 day" +"%F"; }
function gestern() { date --date="-1 day" +"%F"; }
function today() { date +"%F"; }
function heute() { date +"%F"; }
function morgen() { date --date="+1 day" +"%F"; }
function tomorrow() { date --date="+1 day" +"%F"; }
function ubermorgen() { date --date="+2 days" +"%F"; }

function newfile(){
	echo "$@_$(date +'%F_%T')"
}

function newblessing(){

	set +o noclobber

	journaldir=~/Documents/notes/
	journalfile="${journaldir}blessings_$(date +"%Y_%m").md"
	# echo "${journalfile}"
	[[ -f "$journalfile" ]] && {

		header="
#

Entry: **$(date +"%F %T CST")**

"
		echo -e "${header}" >> ${journalfile}
		
		mvim ${journalfile} &
		return 0
	}


	header="---
notes: double spaced for ghostwriter/neovim markdown preview
    
title: Blessings for $(date +"%m of %Y")

date: $(today)

copyright-years: $(date +"%Y")

copyright: $(date +"%Y")

copyright-year-from: $(date +"%Y")

toc: true

company: Personal

author: Kirk L. Roybal

---

[[toc]]

##

Entry: **$(date +"%F %T CST")**

"

echo -e "${header}" > ${journalfile}
mvim ${journalfile} &
	
}
	
function mcd() { mkdir -p "$@" && cd "$@"; }
function a() { vim ~/.bash_aliases; source ~/.bash_aliases; }
function pbcopy() { xclip -selection clipboard; }
function pbpaste(){ xclip -o; }
function replicate(){ printf "%$2s" | sed "s/ /$1/g"; }
function extract() {
    [[ -z "$1" ]] && { 
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz|lzma|dmg|pax|paxz|cab|chm|deb|dmg|iso|lzh|msi|rpm|udf|wim|xar>"
    echo "       extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
    return 1
    }

    for n in "${@}"
    do
      if [ -f "$n" ] ; then
          case "${n%,}" in
            *.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar) 
                         tar xvf "$n"       ;;
            *.lzma)      unlzma ./"$n"      ;;
            *.dmg)       hdiutil mount $1   ;;
            *.bz2)       bunzip2 ./"$n"     ;;
            *.rar)       unrar x -ad ./"$n" ;;
            *.gz)        gunzip ./"$n"      ;;
            *.pax)       cat $1 | pax -r    ;;
            *.paxz)      uncompress $1 --stdout | pax -r ;;
            *.zip|*.ZIP) unzip ./"$n"       ;;
            *.z|*.Z)     uncompress ./"$n"  ;;
            *.7z|*.arj|*.cab|*.chm|*.deb|*.dmg|*.iso|*.lzh|*.msi|*.rpm|*.udf|*.wim|*.xar)
                         7z x ./"$n"        ;;
            *.xz)        unxz ./"$n"        ;;
            *.exe)       cabextract ./"$n"  ;;
            *)
                         echo "extract: '$n' - unknown archive method"
                         return 1
                         ;;
          esac
      else
          echo "'$n' - file does not exist"
          return 1
      fi
    done

}
